class Node:
    def __init__(self, cargo=None, next=None):
        self.cargo = cargo
        self.next  = next

    def __str__(self):
        return str(self.cargo)

class LinkedList:
    def __init__(self):
        self.Length = 0
        self.head = None


class Tree:
    def __init__(self, cargo, left=None, right=None):
        self.cargo = cargo
        self.left = left
        self.right = right

    def __str__(self):
        return str(self.cargo)

    def total(tree):
        if tree is None: return 0
        return Tree.total(tree.left) + Tree.total(tree.right) + tree.cargo

    def print_tree(tree):
        if tree is None: return
        print(tree.cargo, end=" ")
        Tree.print_tree(tree.left)
        Tree.print_tree(tree.right)

    def print_tree_postorder(tree):
        if tree is None: return
        Tree.print_tree_postorder(tree.left)
        Tree.print_tree_postorder(tree.right)
        print(tree.cargo, end=" ")

    def print_tree_inorder(tree):
        if tree is None: return
        Tree.print_tree_inorder(tree.left)
        print(tree.cargo, end=" ")
        Tree.print_tree_inorder(tree.right)

    def print_tree_indented(tree, level=0):
        if tree is None: return
        Tree.print_tree_indented(tree.right, level+1)
        print("  " * level + str(tree.cargo))
        Tree.print_tree_indented(tree.left, level+1)

    def get_token(token_list, expected):
        if token_list[0] == expected:
            del token_list[0]
            return True
        return False

    def get_number(token_list):
        x = token_list[0]
        if type(x) != type(0): return None
        del token_list[0]
        return Tree(x, None, None)

tree = Tree("+", Tree(1), Tree("*", Tree(2), Tree(3)))
Tree.print_tree_inorder(tree)



